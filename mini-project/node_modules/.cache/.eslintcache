[{"/Users/kimiaasarroodi/mini-project/src/components/Log.js":"1","/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/index.js":"2","/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/App.js":"3","/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/reportWebVitals.js":"4","/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/components/Log.js":"5","/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/components/Summary.js":"6"},{"size":1787,"mtime":1615453970751,"results":"7","hashOfConfig":"8"},{"size":500,"mtime":1615424642027,"results":"9","hashOfConfig":"10"},{"size":225,"mtime":1615527548552,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1615421771507,"results":"12","hashOfConfig":"10"},{"size":2379,"mtime":1615527535847,"results":"13","hashOfConfig":"10"},{"size":911,"mtime":1615527531070,"results":"14","hashOfConfig":"10"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18e5xd7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"btzzlw",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/kimiaasarroodi/mini-project/src/components/Log.js",[],"/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/index.js",[],["30","31"],"/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/App.js",[],"/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/reportWebVitals.js",[],"/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/components/Log.js",["32","33","34"],"import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nvar arrobjs = [];\n\n\n\nconst Log = () => {\n\n  //Using hook to add states to function components\n  const [logs, setLogs] = useState([]);\n  const [time, setTime] = useState([]);\n  const [isRunning, setIsRunning] = useState(true);\n  const [intervalId, setIntervalId] = useState(null);\n\n  useEffect(() => {\n    //Retrieving data from API every 2 secs\n    if (isRunning) {\n      const id = window.setInterval(() => {\n        console.log('this will run every two secs!');\n        axios.get('https://join.reckon.com/stock-pricing')\n          .then(res => {\n            console.log(res.data);\n            var currentdate = new Date();\n            setTime(\"Updates for \" + currentdate.getDate() + \"/\"\n              + (currentdate.getMonth() + 1) + \"/\"\n              + currentdate.getFullYear() + \"  \"\n              + currentdate.getHours() + \":\"\n              + currentdate.getMinutes() + \":\"\n              + currentdate.getSeconds());\n            var obj = {\n              \"code\": \"Updates for \" + currentdate.getDate() + \"/\"\n                + (currentdate.getMonth() + 1) + \"/\"\n                + currentdate.getFullYear() + \"  \"\n                + currentdate.getHours() + \":\"\n                + currentdate.getMinutes() + \":\"\n                + currentdate.getSeconds(), \"price\": \" \"\n            };\n            arrobjs.push(obj);\n            res.data.map(item => arrobjs.push(item));\n            arrobjs.push(res.data);;\n            setLogs(arrobjs);\n          })\n          \n          .catch(err => {\n            console.log(err)\n          })\n      }, 2000);\n      // Clearing interval when log paused\n      return () => window.clearInterval(id);\n    }\n  }, [isRunning]);\n//Displaying html elements on the\n  return (\n\n    <div className=\"log-box\">\n      <h1>Log</h1>\n      <button id=\"btn\" onClick={() => {\n        setIsRunning(!isRunning);\n        if (isRunning === true) {\n          document.getElementById(\"btn\").innerHTML = \"Resume Log\";\n        }\n        else { document.getElementById(\"btn\").innerHTML = \"Pause Log\"; }\n      }}>Pause Log</button>\n      <ul>\n        {\n          Object.keys(logs)\n            .map((item, i) => (\n              <li key={i}>\n                <span >{logs[item].code} {logs[item].price}  </span>\n              </li>))\n\n        }</ul>\n    </div>\n  );\n};\n\nexport default Log\n\n//","/Users/kimiaasarroodi/Desktop/miniproject/MiniProject/mini-project/src/components/Summary.js",["35"],"import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nvar arrobjs = [];\n\n\n\nconst Summary = () => {\n\n  const [logs, setLogs] = useState([]);\n\n//Retrieving data from API every 2 secs and storing them in logs\n  useEffect(() => {\n    const interval = setInterval(() => {\n      axios.get('https://join.reckon.com/stock-pricing')\n        .then(res => {\n          res.data.map(item => arrobjs.push(item));\n          setLogs(arrobjs);\n        })\n        .catch(err => {\n          console.log(err)\n        })\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  //Rendering UI\n  return (\n    <div className=\"summary-box\">\n      <h1>Summary</h1>\n      <table >\n        <tr>\n          <th>Stock</th>\n          <th>Starting</th>\n          <th>Lowest</th>\n          <th>Highest</th>\n          <th>Current</th>\n        </tr>\n      </table>\n    </div>\n  );\n};\n\nexport default Summary\n\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":12,"column":10,"nodeType":"42","messageId":"43","endLine":12,"endColumn":14},{"ruleId":"40","severity":1,"message":"44","line":14,"column":10,"nodeType":"42","messageId":"43","endLine":14,"endColumn":20},{"ruleId":"40","severity":1,"message":"45","line":14,"column":22,"nodeType":"42","messageId":"43","endLine":14,"endColumn":35},{"ruleId":"40","severity":1,"message":"46","line":10,"column":10,"nodeType":"42","messageId":"43","endLine":10,"endColumn":14},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'time' is assigned a value but never used.","Identifier","unusedVar","'intervalId' is assigned a value but never used.","'setIntervalId' is assigned a value but never used.","'logs' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]